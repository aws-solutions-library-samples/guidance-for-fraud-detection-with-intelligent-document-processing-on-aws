{
    "Comment": "A description of my state machine",
    "StartAt": "Prompt Prep for JSON generation",
    "States": {
      "Prompt Prep for JSON generation": {
        "Type": "Task",
        "Resource": "arn:aws:states:::lambda:invoke",
        "Output": "{% $merge([$states.input.StatePayload, {\"prompt\": $states.result.Payload}]) %}",
        "Arguments": {
          "FunctionName": "arn:aws:lambda:<AWS_REGION>:<AWS_ACCOUNT>:function:insuranceclaimJsonReportGeneration:$LATEST",
          "Payload": "{% $states.input.StatePayload %}"
        },
        "Retry": [
          {
            "ErrorEquals": [
              "Lambda.ServiceException",
              "Lambda.AWSLambdaException",
              "Lambda.SdkClientException",
              "Lambda.TooManyRequestsException"
            ],
            "IntervalSeconds": 1,
            "MaxAttempts": 3,
            "BackoffRate": 2,
            "JitterStrategy": "FULL"
          }
        ],
        "Next": "Generate JSON"
      },
      "Generate JSON": {
        "Type": "Task",
        "Arguments": {
          "ModelId": "us.amazon.nova-pro-v1:0",
          "InferenceConfig": {
            "MaxTokens": 4096,
            "Temperature": 0.2,
            "TopP": 0.2
          },
          "System": "{% $states.input.prompt.body.system %}",
          "Messages": "{% $states.input.prompt.body.messages %}"
        },
        "Resource": "arn:aws:states:::aws-sdk:bedrockruntime:converse",
        "Next": "Parallel",
        "Output": "{% $merge([$states.result, {\n'claimId': $states.input.claimId\n}]) %}"
      },
      "Parallel": {
        "Type": "Parallel",
        "Branches": [
          {
            "StartAt": "Store JSON",
            "States": {
              "Store JSON": {
                "Type": "Task",
                "Resource": "arn:aws:states:::lambda:invoke",
                "Output": "{% $states.result.Payload %}",
                "Arguments": {
                  "FunctionName": "arn:aws:lambda:<AWS_REGION>:<AWS_ACCOUNT>:function:insuranceclaim-PutItemDynamodb:$LATEST",
                  "Payload": {
                    "dynamodbTable": "insuranceclaim-reports-json",
                    "body": "{%  $parse($replace($replace($states.input.Output.Message.Content[0].Text,'```json\n', ''), '```',''))%}"
                  }
                },
                "Retry": [
                  {
                    "ErrorEquals": [
                      "Lambda.ServiceException",
                      "Lambda.AWSLambdaException",
                      "Lambda.SdkClientException",
                      "Lambda.TooManyRequestsException"
                    ],
                    "IntervalSeconds": 1,
                    "MaxAttempts": 3,
                    "BackoffRate": 2,
                    "JitterStrategy": "FULL"
                  }
                ],
                "End": true
              }
            }
          },
          {
            "StartAt": "Generate Doc",
            "States": {
              "Generate Doc": {
                "Type": "Task",
                "Arguments": {
                  "ModelId": "arn:aws:bedrock:<AWS_REGION>:<AWS_ACCOUNT>:inference-profile/us.amazon.nova-pro-v1:0",
                  "InferenceConfig": {
                    "MaxTokens": 4096,
                    "Temperature": 0.3,
                    "TopP": 0.3
                  },
                  "System": [
                    {
                      "Text": "Create a HTML document of a claim report to be reviewed by a claim inspector. Input data will be given by a user as a JSON document. Output should begin with a section which states brief summary and insights on the claim case. Be sure to mention if there were any suspicious input for the claim. After the section, create back up sections using each attribute in the JSON. Visualize the data using tables and bullets."
                    }
                  ],
                  "Messages": [
                    {
                      "Role": "user",
                      "Content": [
                        {
                          "Text": "{%$states.input.Output.Message.Content[0].Text %}"
                        }
                      ]
                    }
                  ]
                },
                "Resource": "arn:aws:states:::aws-sdk:bedrockruntime:converse",
                "Next": "Store Doc",
                "Output": "{% $merge([$states.result, {'claimId':$states.input.claimId}])%}"
              },
              "Store Doc": {
                "Type": "Task",
                "Resource": "arn:aws:states:::lambda:invoke",
                "Output": "{% $states.result.Payload %}",
                "Arguments": {
                  "FunctionName": "arn:aws:lambda:<AWS_REGION>:<AWS_ACCOUNT>:function:insuranceclaim-PutItemDynamodb:$LATEST",
                  "Payload": {
                    "dynamodbTable": "insuranceclaim-reports-doc",
                    "body": {
                      "claimId": "{%$states.input.claimId%}",
                      "doc": "{%  $replace($replace($states.input.Output.Message.Content[0].Text,'```html\n', ''), '```','')%}"
                    }
                  }
                },
                "Retry": [
                  {
                    "ErrorEquals": [
                      "Lambda.ServiceException",
                      "Lambda.AWSLambdaException",
                      "Lambda.SdkClientException",
                      "Lambda.TooManyRequestsException"
                    ],
                    "IntervalSeconds": 1,
                    "MaxAttempts": 3,
                    "BackoffRate": 2,
                    "JitterStrategy": "FULL"
                  }
                ],
                "End": true
              }
            }
          }
        ],
        "End": true
      }
    },
    "QueryLanguage": "JSONata"
  }