{
    "QueryLanguage": "JSONata",
    "Comment": "A description of my state machine",
    "StartAt": "Lambda Invoke",
    "States": {
      "Lambda Invoke": {
        "Type": "Task",
        "Resource": "arn:aws:states:::lambda:invoke",
        "Output": "{% $merge([$states.result.Payload, $states.input.StatePayload]) %}",
        "Arguments": {
          "FunctionName": "arn:aws:lambda:<AWS_REGION>:<AWS_ACCOUNT>:function:insuranceclaimImageTamperingDetection:$LATEST",
          "Payload": "{% $states.input.StatePayload %}"
        },
        "Retry": [
          {
            "ErrorEquals": [
              "Lambda.ServiceException",
              "Lambda.AWSLambdaException",
              "Lambda.SdkClientException",
              "Lambda.TooManyRequestsException"
            ],
            "IntervalSeconds": 1,
            "MaxAttempts": 3,
            "BackoffRate": 2,
            "JitterStrategy": "FULL"
          }
        ],
        "Next": "Choice"
      },
      "Choice": {
        "Type": "Choice",
        "Choices": [
          {
            "Next": "DynamoDB UpdateItem",
            "Condition": "{% $states.input.fraudDetect = 1 %}"
          }
        ],
        "Default": "Success"
      },
      "DynamoDB UpdateItem": {
        "Type": "Task",
        "Resource": "arn:aws:states:::dynamodb:updateItem",
        "Arguments": {
          "TableName": "insuranceclaim-bda-results-raw",
          "Key": {
            "claimId": {
              "S": "{% $states.input.claimId %}"
            },
            "name": {
              "S": "{% $split($states.input.key, '/')[-1] %}"
            }
          },
          "UpdateExpression": "SET fraudDetection = :fraudDetection",
          "ExpressionAttributeValues": {
            ":fraudDetection": {
              "S": "Tampered Image"
            }
          }
        },
        "End": true
      },
      "Success": {
        "Type": "Succeed"
      }
    }
  }