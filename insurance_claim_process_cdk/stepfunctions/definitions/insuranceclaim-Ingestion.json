{
    "Comment": "A description of my state machine",
    "StartAt": "Is this a folder?",
    "QueryLanguage": "JSONata",
    "States": {
      "Is this a folder?": {
        "Type": "Choice",
        "Default": "InvokeDataAutomationAsync",
        "Choices": [
          {
            "Next": "Skip",
            "Condition": "{% $states.input.StatePayload.size =0 %}"
          }
        ],
        "QueryLanguage": "JSONata",
        "Output": "{%$states.input.StatePayload%}"
      },
      "InvokeDataAutomationAsync": {
        "Type": "Task",
        "Arguments": {
          "DataAutomationProfileArn":"arn:aws:bedrock:<AWS_REGION>:<AWS_ACCOUNT>:data-automation-profile/us.data-automation-v1",
          "DataAutomationConfiguration": {
            "Stage": "LIVE",
            "DataAutomationProjectArn": "<BDA_PROJECT_ARN>"
          },
          "NotificationConfiguration": {
            "EventBridgeConfiguration": {
              "EventBridgeEnabled": true
            }
          },
          "InputConfiguration": {
            "S3Uri": "{% 's3://' & $states.input.inputBucket & '/' & $states.input.key %}"
          },
          "OutputConfiguration": {
            "S3Uri": "{% 's3://' & $states.input.outputBucket & '/' & $states.input.key %}"
          }
        },
        "Resource": "arn:aws:states:::aws-sdk:bedrockdataautomationruntime:invokeDataAutomationAsync",
        "Next": "Wait",
        "QueryLanguage": "JSONata",
        "Output": {
          "inputBucket": "{% $states.input.inputBucket %}",
          "claimId": "{% $states.input.claimId %}",
          "key": "{% $states.input.key %}",
          "outputBucket": "{% $states.input.outputBucket %}",
          "InvocationArn": "{%$states.result.InvocationArn%}"
        }
      },
      "Wait": {
        "Type": "Wait",
        "Seconds": 5,
        "Next": "GetDataAutomationStatus"
      },
      "GetDataAutomationStatus": {
        "Type": "Task",
        "Arguments": {
          "InvocationArn": "{%$states.input.InvocationArn%}"
        },
        "Resource": "arn:aws:states:::aws-sdk:bedrockdataautomationruntime:getDataAutomationStatus",
        "Next": "Completed?",
        "Output": {
          "inputBucket": "{% $states.input.inputBucket %}",
          "claimId": "{% $states.input.claimId %}",
          "key": "{% $states.input.key %}",
          "outputBucket": "{% $states.input.outputBucket %}",
          "Status": "{%$states.result.Status%}",
          "InvocationArn": "{%$states.input.InvocationArn%}"
        },
        "QueryLanguage": "JSONata"
      },
      "Completed?": {
        "Type": "Choice",
        "Default": "Wait",
        "Choices": [
          {
            "Next": "Store Raw JSONs",
            "Condition": "{%$states.input.Status = 'Success'%}",
            "Output": {
              "inputBucket": "{% $states.input.inputBucket %}",
              "claimId": "{% $states.input.claimId %}",
              "key": "{% $states.input.key %}",
              "outputBucket": "{% $states.input.outputBucket %}"
            }
          },
          {
            "Next": "Fail",
            "Condition": "{%$states.input.Status = 'Fail'%}"
          }
        ],
        "QueryLanguage": "JSONata"
      },
      "Success": {
        "Type": "Succeed"
      },
      "Fail": {
        "Type": "Fail"
      },
      "Store Raw JSONs": {
        "Type": "Task",
        "Resource": "arn:aws:states:::lambda:invoke",
        "Output": "{% $states.result.Payload %}",
        "Next": "Success",
        "Arguments": {
          "FunctionName": "arn:aws:lambda:<AWS_REGION>:<AWS_ACCOUNT>:function:insuranceclaimRawJsonProcessing",
          "Payload": "{% $states.input %}"
        },
        "Retry": [
          {
            "ErrorEquals": [
              "Lambda.ServiceException",
              "Lambda.AWSLambdaException",
              "Lambda.SdkClientException",
              "Lambda.TooManyRequestsException"
            ],
            "IntervalSeconds": 1,
            "MaxAttempts": 3,
            "BackoffRate": 2,
            "JitterStrategy": "FULL"
          }
        ],
        "QueryLanguage": "JSONata"
      },
      "Skip": {
        "Type": "Pass",
        "End": true
      }
    }
  }